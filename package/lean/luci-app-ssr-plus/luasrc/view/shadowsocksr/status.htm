<script type="text/javascript">//<![CDATA[
XHR.poll(3, '<%=url([[admin]], [[services]], [[shadowsocksr]], [[run]])%>', null,
	function(x, data) {
		var tb = document.getElementById('shadowsocksr_status');
		if (data && tb) {
			if (data.running) {
				var links = '<em><b><font color=green>ShadowsocksR Plus+ <%:RUNNING%></font></b></em>';
				tb.innerHTML = links;
			} else {
				tb.innerHTML = '<em><b><font color=red>ShadowsocksR Plus+ <%:NOT RUNNING%></font></b></em>';
			}
		}
	}
);
//]]>
</script>
<style>.mar-10 {margin-left: 50px; margin-right: 10px;}</style>
<fieldset class="cbi-section">
	<p id="shadowsocksr_status">
		<em><%:Collecting data...%></em>
	</p>
</fieldset>

<fieldset class="cbi-section">
	<table width="100%" cellspacing="10">
		<tr><td class="align-left" width="50%"><span><%:Global IP%> </span>&nbsp;:&nbsp;<span id="ip-ipify"><font color=red><%:Checking...%></font></span> <span id="ip-ipify-ipip"></span></td> <td  width="15%">  <span><%:Google%></span>&nbsp;:&nbsp;<span id="_google"><em><%:Collecting data...%></em></span></td><td   width="15%"><%:Youtube%> </span>&nbsp;:&nbsp;<span id="_youtube"><em><%:Collecting data...%></em></span></td><td  ><%:Github%> </span>&nbsp;:&nbsp;<span id="_github"><em><%:Collecting data...%></em></span></td></tr>	   
	    <tr><td class="align-left" width="50%"><span><%:Domestic IP%> </span>&nbsp;:&nbsp;<span id="d-ip"><font color=red><%:Checking...%></font></span></td><td  width="15%"> <span><%:Baidu%></span>&nbsp;:&nbsp;<span  id="_baidu"><em><%:Collecting data...%></em></span></td> <td  width="15%"><%:Music.163%> </span>&nbsp;:&nbsp;<span id="_http-163"><em><%:Collecting data...%></em></span></td><td  ><%:Taobao%> </span>&nbsp;:&nbsp;<span id="_taobao"><em><%:Collecting data...%></em></span></td></tr>
    </table>
</fieldset>

<script type="text/javascript">//<![CDATA[
let random = parseInt(Math.random() * 100000000);
let IP = {
            get: (url, type) =>
                fetch(url, { method: 'GET' }).then((resp) => {
                    if (type === 'text')
                        return Promise.all([resp.ok, resp.status, resp.text(), resp.headers]);
                    else {
                        return Promise.all([resp.ok, resp.status, resp.json(), resp.headers]);
                    }
                }).then(([ok, status, data, headers]) => {
                    if (ok) {
                        let json = {
                            ok,
                            status,
                            data,
                            headers
                        }
                        return json;
                    } else {
                        throw new Error(JSON.stringify(json.error));
                    }
                }).catch(error => {
                    throw error;
                }),
          parseIPIpip: (ip, elID) => {
                IP.get(`https://api.skk.moe/network/parseIp/ipip/v3/${ip}`, 'json')
                    .then(resp => {
                        let x = '';
                        for (let i of resp.data) {
                            x += (i !== '') ? `${i} ` : '';
                        }
                        document.getElementById(elID).innerHTML = x;
                        //$$.getElementById(elID).innerHTML = `${resp.data.country} ${resp.data.regionName} ${resp.data.city} ${resp.data.isp}`;
                    })
            },

            getIpipnetIP: () => {
                IP.get(`https://myip.ipip.net/?z=${random}`, 'text')
                    .then((resp) => {
                        let data = resp.data.replace('当前 IP：', '').split(' 来自于：');
                        document.getElementById('d-ip').innerHTML = `${data[0]} ${data[1]}`;
                    });
            },
	   getIpifyIP: () => {
                IP.get(`https://api.ipify.org/?format=json&z=${random}`, 'json')
                .then(resp => {
                document.getElementById('ip-ipify').innerHTML = resp.data.ip;
                return resp.data.ip;
                })
                .then(ip => {
                IP.parseIPIpip(ip, 'ip-ipify-ipip');
                })
            }

	   /*getIpsbIP: (data) => {
                document.getElementById('ip-ipify').innerHTML = data.address;
		if ( "${data.province}" == " " || "${data.city}" == " " ){
                document.getElementById('ip-ipify-ipip').innerHTML = `${data.country} ${data.isp.name}`				
		}else{
		document.getElementById('ip-ipify-ipip').innerHTML = `${data.country} ${data.province} ${data.city} ${data.isp.name}`
		}
	   },*/
				
           
}

			
var HTTP = {
	checker: (domain, cbElID) => {
		let img = new Image;
		let timeout = setTimeout(() => {
			img.onerror = img.onload = null;
			img = null;
			document.getElementById(cbElID).innerHTML = '<b><font color=red><%:NO ACCESS%></font></b>'
		}, 1000);
		img.onerror = () => {
			clearTimeout(timeout);
			document.getElementById(cbElID).innerHTML = '<b><font color=red><%:TIMEOUT%></font></b>'
		}
		img.onload = () => {
			clearTimeout(timeout);
			document.getElementById(cbElID).innerHTML = '<b><font color=green><%:NORMAL%></font></b>'
		}
		img.src = `https://${domain}/favicon.ico?${+(new Date)}`
	}

}

          function Load()
	      {
	         var tbip = document.getElementsByTagName('HEAD').item(0);
	         var tbipScript= document.createElement("script");
	         tbipScript.async = "async";
	         tbipScript.src='https://myip.ipip.net/?z=${random}';
	         tbip.appendChild( tbipScript);

	         var sbip = document.getElementsByTagName('HEAD').item(0);
	         var sbipScript= document.createElement("script");
	         sbipScript.async = "async";
	         sbipScript.src='https://api.skk.moe/network/parseIp/ipip/v3';
	         sbip.appendChild( sbipScript);



	         const $$ = document;
	         random = parseInt(Math.random() * 100000000);
       	            setTimeout("Load()",1000*8);
		   }
	var web = document.getElementById('_web');
	var shadowsocksr = document.getElementById('_shadowsocksr');
	var ip = document.getElementById('_ip');
	var port = document.getElementById('_port');
	var secret = document.getElementById('_secret');
	var emode = document.getElementById('_emode');
	var version = document.getElementById('_version');
	var yac = document.getElementById('_yac');
	var logo = document.getElementById('_logo');
	XHR.poll(1, '<%=luci.dispatcher.build_url("admin", "services", "shadowsocksr", "status")%>', null, function(x, status) {
		if ( x && x.status == 200 ) {
			web.innerHTML = status.web ? '<a type="button" class="btn" style="background-color:black;padding: 5px;"  href="http://'+window.location.hostname+':'+status.dash_port+'/ui" target="_blank"/><b><font color=green><%:OPEN DASHBOARD%></font></b></a>' : '<b><font color=red><%:NOT RUNNING%></font></b>';
			yac.innerHTML = status.web ? '<a type="button" class="btn" style="background-color:black;padding: 5px;"  href="http://'+window.location.hostname+'/shadowsocksr" target="_blank"/><b><font color=green><%:OPEN DASHBOARD%></font></b></a>' : '<b><font color=red><%:NOT RUNNING%></font></b>';shadowsocksr.innerHTML = status.shadowsocksr ? '<b><font color=green><%:RUNNING%></font> </b>' : '<b><font color=red><%:NOT RUNNING%></font></b>';
			shadowsocksr.innerHTML = status.shadowsocksr ? '<b><font color=green><%:RUNNING%></font> </b>' : '<b><font color=red><%:NOT RUNNING%></font></b>';
			ip.innerHTML = status.localip ? '<b><font color=green>'+status.localip+'</font> </b>' : '<em><b><font color=red><%:NOT SET%></font></b></em>';
			port.innerHTML = status.dash_port ? '<b><font color=green>'+status.dash_port+'</font> </b>' : '<em><b><font color=red><%:NOT SET%></font></b></em>';
			secret.innerHTML = status.dash_pass ? '<b><font color=green>'+status.dash_pass+'</font> </b>' : '<em><b><font color=red><%:NOT SET%></font></b></em>';
			emode.innerHTML = status.e_mode ? '<b><font color=green style="text-transform: uppercase;">'+status.e_mode+'</font> </b>' : '<b><font color=red><%:NOT SET%></font></b>';	
			IP.getIpifyIP();
			IP.getIpipnetIP();

		}
	});


	XHR.poll(3, '<%=luci.dispatcher.build_url("admin", "services", "shadowsocksr", "status")%>', null, function(x, status) {
		if ( x && x.status == 200 ) {			
			HTTP.checker('www.baidu.com', '_baidu');
			HTTP.checker('www.google.com', '_google');
			HTTP.checker('www.youtube.com', '_youtube');
			HTTP.checker('www.taobao.com', '_taobao');
			HTTP.checker('github.com', '_github');
			HTTP.checker('s1.music.126.net/style', '_http-163');

		}
	});

	IP.getIpifyIP();
	IP.getIpipnetIP();
	HTTP.checker('www.baidu.com', '_baidu');
	HTTP.checker('www.google.com', '_google');
	HTTP.checker('www.youtube.com', '_youtube');
	HTTP.checker('www.taobao.com', '_taobao');
	HTTP.checker('github.com', '_github');
	HTTP.checker('s1.music.126.net/style', '_http-163');

	XHR.get('<%=luci.dispatcher.build_url("admin", "services", "shadowsocksr", "status")%>', null, function(x, status) {
		if ( x && x.status == 200 ) {
			version.innerHTML = status.current_version ? '<b><font color=green><%:Current Version%>'+'&nbsp;:&nbsp;v'+status.current_version+'</font> </b>' : '<em><b><font color=red>NOT SET</font></b></em>';
		
		}
	});



//]]></script>




